" Configuration file for vim
"set runtimepath=~/.vim,/usr/share/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vimcurrent,/usr/share/vim/vimfiles/after,/usr/share/vim/addons/after,~/.vim/after,/usr/share/vim/vim73

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif
" Source a global configuration file if available
if filereadable("/etc/vimrc")
  source /etc/vimrc
endif

" Normally we use vim-extensions. If you want true vi-compatibility
" remove change the following statements
set nocompatible	"    Use Vim defaults instead of 100% vi compatibility
set backspace=indent,eol,start	" more powerful backspacing

" Now we set some defaults for the editor
set autoindent		    " always set autoindenting on
" set linebreak		    " Don't wrap words by default
set textwidth=0		    " Don't wrap lines by default
set viminfo='20,\"50    " Read/write a .viminfo file, don't store more than
                        " 50 lines of registers.
set history=50		    " keep 50 lines of command line history
set ruler		        " show the cursor position all the time

" Suffixes that get lower priority when doing tab completion for filenames.
" These are files we are not likely to want to edit or read.
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc
set showcmd		        " Show (partial) command in status line.
set showmatch		    " Show matching brackets.
set ignorecase		    " Do case insensitive matching
set smartcase
set nosmartindent
set hlsearch            " highlight search
"set incsearch		    " Incremental search
"set autowrite		    " Automatically save before commands like :next and :make
set nonumber
" set nu
if has('mouse')
  set mouse=a             " add mouse interaction
endif

" Highlight column/line
set cursorline
"set cursorcolumn

let mapleader = ","

"pathogen
"call pathogen#runtime_append_all_bundles()
"call pathogen#helptags()
call pathogen#infect()

" Enable syntax-highlighting.
if has("syntax")
  syntax on
endif

" Tell vim which characters to show for expanded TABs,
" trailing whitespace, and end-of-lines. VERY useful!
set listchars=tab:\|-,trail:Â·

colorscheme wombat256mod

" Map .less to .css , lessc is required.
nnoremap ,m :w <BAR> !lessc % > %:t:r.css<CR><space>

if has("autocmd")
 " Enabled file type detection
 " Use the default filetype settings. If you also want to load indent files
 " to automatically do language-dependent indenting add 'indent' as well.
 filetype plugin indent on
 filetype plugin on
endif " has ("autocmd")

au BufRead,BufNewFile *.py  set ai sw=4 sts=4 et tw=72 " Doc strs
au BufRead,BufNewFile *.js  set ai sw=4 sts=4 et tw=72 " Doc strs
au BufRead,BufNewFile *.html set ai sw=4 sts=4 et tw=72 " Doc strs
au BufRead,BufNewFile *.json set ai sw=4 sts=4 et tw=72 " Doc strs
au BufRead,BufNewFile *.less set ai sw=4 sts=4 et tw=72 " Doc strs
au! BufRead,BufNewFile *.json setfiletype json
au BufNewFile,BufRead *.less set filetype=less
au BufNewFile,BufRead *.styl set filetype=styl

" This makes Vim show a status line even when only one window is shown. Who
" said a status line is only useful to separate multiple windows?
set ls=2

" We know xterm-debian is a color terminal
if &term =~ "xterm-debian" || &term =~ "xterm-xfree86"
  set t_Co=16
  set t_Sf=[3%dm
  set t_Sb=[4%dm
else
  set t_Co=256
endif

" When editing a file, always jump to the last known cursor position.
 " Don't do it when the position is invalid or when inside an event handler
 " (happens when dropping a file on gvim).
autocmd BufReadPost *
   \ if line("'\"") > 0 && line("'\"") <= line("$") |
   \   exe "normal! g`\"" |
   \ endif

"------------------------------------------------------------------------------
" Function keys.
"------------------------------------------------------------------------------


map <F1> :NERDTreeToggle ~/workspace/<cr>
let NERDTreeShowBookmarks=1

nnoremap <F2> :set nonumber!<CR>:set foldcolumn=0<CR>

" <F3>: Toggle hlsearch (highlight search matches).
nmap <F3> :set hls!<CR>

set pastetoggle=<F4>          " activa o desactiva el mode paste

" Toggle list (display unprintable characters).
set list
nmap <F6> :set list!<CR>
nnoremap <F7> :call ToggleShowWhitespace()<CR>

nnoremap <C-c> :bdelete<CR>
nmap <C-h> :tabprevious<cr>
nmap <C-l> :tabnext<cr>
nmap <C-t> :tabnew<cr>
map <C-t> :tabnew<cr>
map <C-h> :tabprevious<cr>
map <C-l> :tabnext<cr>
map ty :tabclose<cr>
imap <C-h> <ESC>:tabprevious<cr>
imap <C-l> <ESC>:tabnext<cr>
imap <C-t> <ESC>:tabnew<cr>

nmap <C-k> :bp<CR>
nmap <C-j> :bn<CR>


map <leader>cs :mksession! ~/.vim/session<CR>
map <leader>ls :source ~/.vim/session<CR>

map q :q<CR>

" Some Debian-specific things
if has("autocmd")
  augroup filetype
    au BufRead reportbug.*		set ft=mail
    au BufRead reportbug-*		set ft=mail
  augroup END
endif


" Set paper size from /etc/papersize if available (Debian-specific)
if filereadable("/etc/papersize")
  try
    let s:shellbak = &shell
    let &shell="/bin/sh"
    let s:papersize = matchstr(system("cat /etc/papersize"), "\\p*")
    let &shell=s:shellbak
    if strlen(s:papersize)
      let &printoptions = "paper:" . s:papersize
    endif
  catch /^Vim\%((\a\+)\)\=:E145/
  endtry
endif

" grep in files
cabbrev lvim
      \ lvim /\<lt><C-R><C-W>\>/gj
      \ **/*<C-R>=(expand("%:e")=="" ? "" : ".".expand("%:e"))<CR>
      \ <Bar> lw
      \ <C-Left><C-Left><C-Left>

" Highlight whitespace problems.
" flags is '' to clear highlighting, or is a string to
" specify what to highlight (one or more characters):
"   e  whitespace at end of line
"   i  spaces used for indenting
"   s  spaces before a tab
"   t  tabs not at start of line
function! ShowWhitespace(flags)
  let bad = ''
  let pat = []
  for c in split(a:flags, '\zs')
    if c == 'e'
      call add(pat, '\s\+$')
    elseif c == 'i'
      call add(pat, '^\t*\zs \+')
    elseif c == 's'
      call add(pat, ' \+\ze\t')
    elseif c == 't'
      call add(pat, '[^\t]\zs\t\+')
    else
      let bad .= c
    endif
  endfor
  if len(pat) > 0
    let s = join(pat, '\|')
    exec 'syntax match ExtraWhitespace "'.s.'" containedin=ALL'
  else
    syntax clear ExtraWhitespace
  endif
  if len(bad) > 0
    echo 'ShowWhitespace ignored: '.bad
  endif
endfunction

function! ToggleShowWhitespace()
  if !exists('b:ws_show')
    let b:ws_show = 0
  endif
  if !exists('b:ws_flags')
    let b:ws_flags = 'est'  " default (which whitespace to show)
  endif
  let b:ws_show = !b:ws_show
  if b:ws_show
    call ShowWhitespace(b:ws_flags)
  else
    call ShowWhitespace('')
  endif
endfunction

highlight ExtraWhitespace ctermbg=darkred guibg=darkred
