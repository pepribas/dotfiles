" Configuration file for vim
"set runtimepath=~/.vim,/usr/share/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vimcurrent,/usr/share/vim/vimfiles/after,/usr/share/vim/addons/after,~/.vim/after,/usr/share/vim/vim73

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif
" Source a global configuration file if available
if filereadable("/etc/vimrc")
  source /etc/vimrc
endif

" Normally we use vim-extensions. If you want true vi-compatibility
" remove change the following statements
set nocompatible	"    Use Vim defaults instead of 100% vi compatibility
set backspace=indent,eol,start	" more powerful backspacing
filetype off                   " required!

set rtp+=/usr/local/opt/fzf
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle
" required!
Plugin 'VundleVim/Vundle.vim'

" original repos on GitHub
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'ervandew/supertab'
Plugin 'bling/vim-airline'

Plugin 'chriskempson/base16-vim'

Plugin 'pangloss/vim-javascript'

Plugin 'vim-ruby/vim-ruby'
" python
Plugin 'hdima/python-syntax'
Plugin 'hynek/vim-python-pep8-indent'
Plugin 'davidhalter/jedi-vim'

Plugin 'diefans/vim-da-yaml'
Plugin 'chase/vim-ansible-yaml'

Plugin 'junegunn/fzf.vim'
Plugin 'mileszs/ack.vim'
Plugin 'jlanzarotta/bufexplorer'

Plugin 'vim-scripts/groovy.vim'
Plugin 'tfnico/vim-gradle'

call vundle#end()
filetype plugin indent on

" load local config
if filereadable((expand("~/.localvimrc")))
  source ~/.localvimrc
endif

if has('gui_running')
  set guifont=Monaco\ for\ Powerline:h13
  let g:airline_powerline_fonts = 1
endif

if has("autocmd")
 " Enabled file type detection
 " Use the default filetype settings. If you also want to load indent files
 " to automatically do language-dependent indenting add 'indent' as well.
 filetype plugin indent on
 filetype plugin on
endif " has ("autocmd")

" Theme settings

" We know xterm-debian is a color terminal
if &term =~ "xterm-debian" || &term =~ "xterm-xfree86"
  set t_Co=16
  set t_Sf=[3%dm
  set t_Sb=[4%dm
else
  set t_Co=256
endif

colorscheme base16-monokai
set background=dark

" Now we set some defaults for the editor
set autoindent		    " always set autoindenting on
" set linebreak		    " Don't wrap words by default
set textwidth=0		    " Don't wrap lines by default
set viminfo='20,\"50    " Read/write a .viminfo file, don't store more than
                        " 50 lines of registers.
set history=50		    " keep 50 lines of command line history
set ruler		        " show the cursor position all the time

" Suffixes that get lower priority when doing tab completion for filenames.
" These are files we are not likely to want to edit or read.
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc
set showcmd		        " Show (partial) command in status line.
set showmatch		    " Show matching brackets.
set ignorecase		    " Do case insensitive matching
set smartcase
set nosmartindent
set hlsearch            " highlight search
nnoremap <leader><space> :noh<cr>
set incsearch		    " Incremental search
"set autowrite		    " Automatically save before commands like :next and :make
if has('mouse')
  set mouse=a             " add mouse interaction
endif

" Highlight column/line
"set cursorline
"set cursorcolumn

" Allow modified hidden buffers
set hidden

" Autocomplete in explore
set wildmenu
set wildmode=longest,list
set wildignore=*.o,*.obj,*.bak,*.exe,*.py[co],*.swp,*~,*.class
let mapleader = ","

" Enable syntax-highlighting.
if has("syntax")
  syntax on
endif

" Tell vim which characters to show for expanded TABs,
" trailing whitespace, and end-of-lines. VERY useful!
set listchars=tab:â–¸\ ,trail:â–ˆ

" Map .less to .css , lessc is required.
nnoremap ,m :w <BAR> !lessc % > %:t:r.css<CR><space>

" au BufRead,BufNewFile *.py  set ai sw=4 sts=4 et tw=72 " Doc strs
au BufRead,BufNewFile *.js  set ai sw=2 sts=2 et tw=72 " Doc strs
au BufRead,BufNewFile *.jsx  set ai sw=2 sts=2 et tw=72 " Doc strs
au BufRead,BufNewFile *.html set ai sw=4 sts=4 et tw=72 " Doc strs
au BufRead,BufNewFile *.json set ai sw=4 sts=4 et tw=72 " Doc strs
au BufRead,BufNewFile *.less set ai sw=4 sts=4 et tw=72 " Doc strs
au BufRead,BufNewFile *.sql set ai sw=4 sts=4 et
au! BufRead,BufNewFile *.json setfiletype json
au BufNewFile,BufRead *.less set filetype=less
au BufNewFile,BufRead *.styl set filetype=styl
au BufRead,BufNewFile *.groovy  set ai sw=4 sts=4 et " Doc strs
au BufRead,BufNewFile *.gradle  set ai sw=4 sts=4 et " Doc strs

autocmd FileType ruby setlocal expandtab shiftwidth=2 tabstop=2

" jedi-vim options
let g:jedi#popup_on_dot = 0
"let g:jedi#use_splits_not_buffers = "left"
let g:SuperTabDefaultCompletionType = "context"
let g:jedi#popup_select_first = 0
let g:jedi#show_call_signatures = 0
" nerdtree ignored extensions
let NERDTreeIgnore = ['\.pyc$']

" This makes Vim show a status line even when only one window is shown. Who
" said a status line is only useful to separate multiple windows?
set ls=2

" When editing a file, always jump to the last known cursor position.
 " Don't do it when the position is invalid or when inside an event handler
 " (happens when dropping a file on gvim).
autocmd BufReadPost *
   \ if line("'\"") > 0 && line("'\"") <= line("$") |
   \   exe "normal! g`\"" |
   \ endif

" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! w !sudo tee > /dev/null %

map q :q<CR>

 if executable('ag')
   let g:ackprg = 'ag --vimgrep'
 endif

nnoremap <leader>a :Search<space>
nnoremap <leader>s :Buffers<cr>
nnoremap <leader>f :Files<cr>

let g:bufExplorerShowRelativePath=1
let g:bufExplorerSplitOutPathName=0
let g:ctrlp_match_window = 'bottom,order:btt,min:10,max:20,results:40'

map <F1> :NERDTreeToggle<cr>
let NERDTreeShowBookmarks=1

set nonumber
nnoremap <F2> :set number!<CR>:set foldcolumn=0<CR>

" <F3>: Toggle hlsearch (highlight search matches).
nmap <F3> :set hls!<CR>

set pastetoggle=<F4>          " activa o desactiva el mode paste

" Toggle list (display unprintable characters).
set list
nmap <F6> :set list!<CR>
" nmap <F8> :TagbarToggle<CR>
nnoremap <C-c> :bdelete<CR>
nmap <C-t> :tabnew<cr>
map <C-t> :tabnew<cr>
noremap <D-A-Left> :tabprevious<cr>
noremap <D-A-Right> :tabnext<cr>
map ty :tabclose<cr>
imap <C-t> <ESC>:tabnew<cr>

nmap <C-k> :bp<CR>
nmap <C-j> :bn<CR>

" toggle comments with NERDCommenter
vmap <C-c> <Leader>c<space>gv
map <C-c> <Leader>c<space>
